//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.8.2'.
//
package com.kauche.api.platform.customer.graphql.selections

import com.apollographql.apollo3.api.CompiledField
import com.apollographql.apollo3.api.CompiledSelection
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.notNull
import com.kauche.api.platform.customer.graphql.type.Comment
import com.kauche.api.platform.customer.graphql.type.Customer
import com.kauche.api.platform.customer.graphql.type.GraphQLID
import com.kauche.api.platform.customer.graphql.type.GraphQLString
import com.kauche.api.platform.customer.graphql.type.Product
import kotlin.collections.List

public object ProductListQuerySelections {
  private val __customer: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build()
      )

  private val __comments: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "text",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "customer",
          type = Customer.type.notNull()
        ).selections(__customer)
        .build()
      )

  private val __products: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "id",
          type = GraphQLID.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "name",
          type = GraphQLString.type.notNull()
        ).build(),
        CompiledField.Builder(
          name = "comments",
          type = Comment.type.notNull().list().notNull()
        ).selections(__comments)
        .build()
      )

  public val __root: List<CompiledSelection> = listOf(
        CompiledField.Builder(
          name = "products",
          type = Product.type.notNull().list().notNull()
        ).selections(__products)
        .build()
      )
}
