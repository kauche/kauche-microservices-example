//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.6.2'.
//
package com.kauche.api.platform.customer.graphql.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.obj
import com.kauche.api.platform.customer.graphql.ProductListQuery
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object ProductListQuery_ResponseAdapter {
  public object Data : Adapter<ProductListQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("products")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ProductListQuery.Data {
      var _products: List<ProductListQuery.Product>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _products = Product.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ProductListQuery.Data(
        products = _products!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: ProductListQuery.Data,
    ): Unit {
      writer.name("products")
      Product.obj().list().toJson(writer, customScalarAdapters, value.products)
    }
  }

  public object Product : Adapter<ProductListQuery.Product> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "comments")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ProductListQuery.Product {
      var _id: String? = null
      var _name: String? = null
      var _comments: List<ProductListQuery.Comment>? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _comments = Comment.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ProductListQuery.Product(
        id = _id!!,
        name = _name!!,
        comments = _comments!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: ProductListQuery.Product,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("comments")
      Comment.obj().list().toJson(writer, customScalarAdapters, value.comments)
    }
  }

  public object Comment : Adapter<ProductListQuery.Comment> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "text", "user")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ProductListQuery.Comment {
      var _id: String? = null
      var _text: String? = null
      var _user: ProductListQuery.User? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _text = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _user = User.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ProductListQuery.Comment(
        id = _id!!,
        text = _text!!,
        user = _user!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: ProductListQuery.Comment,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("text")
      StringAdapter.toJson(writer, customScalarAdapters, value.text)

      writer.name("user")
      User.obj().toJson(writer, customScalarAdapters, value.user)
    }
  }

  public object User : Adapter<ProductListQuery.User> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        ProductListQuery.User {
      var _id: String? = null
      var _name: String? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return ProductListQuery.User(
        id = _id!!,
        name = _name!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: ProductListQuery.User,
    ): Unit {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)
    }
  }
}
