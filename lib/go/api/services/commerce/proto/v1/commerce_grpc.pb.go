// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/services/commerce/proto/v1/commerce.proto

package commerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommerceServer_ListProducts_FullMethodName = "/example.kauche.com.commerce.v1.CommerceServer/ListProducts"
	CommerceServer_GetProduct_FullMethodName   = "/example.kauche.com.commerce.v1.CommerceServer/GetProduct"
)

// CommerceServerClient is the client API for CommerceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommerceServerClient interface {
	ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error)
	GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error)
}

type commerceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommerceServerClient(cc grpc.ClientConnInterface) CommerceServerClient {
	return &commerceServerClient{cc}
}

func (c *commerceServerClient) ListProducts(ctx context.Context, in *ListProductsRequest, opts ...grpc.CallOption) (*ListProductsResponse, error) {
	out := new(ListProductsResponse)
	err := c.cc.Invoke(ctx, CommerceServer_ListProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServerClient) GetProduct(ctx context.Context, in *GetProductRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, CommerceServer_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommerceServerServer is the server API for CommerceServer service.
// All implementations should embed UnimplementedCommerceServerServer
// for forward compatibility
type CommerceServerServer interface {
	ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error)
	GetProduct(context.Context, *GetProductRequest) (*Product, error)
}

// UnimplementedCommerceServerServer should be embedded to have forward compatible implementations.
type UnimplementedCommerceServerServer struct {
}

func (UnimplementedCommerceServerServer) ListProducts(context.Context, *ListProductsRequest) (*ListProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedCommerceServerServer) GetProduct(context.Context, *GetProductRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}

// UnsafeCommerceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommerceServerServer will
// result in compilation errors.
type UnsafeCommerceServerServer interface {
	mustEmbedUnimplementedCommerceServerServer()
}

func RegisterCommerceServerServer(s grpc.ServiceRegistrar, srv CommerceServerServer) {
	s.RegisterService(&CommerceServer_ServiceDesc, srv)
}

func _CommerceServer_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServerServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceServer_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServerServer).ListProducts(ctx, req.(*ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceServer_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServerServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceServer_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServerServer).GetProduct(ctx, req.(*GetProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommerceServer_ServiceDesc is the grpc.ServiceDesc for CommerceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommerceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.kauche.com.commerce.v1.CommerceServer",
	HandlerType: (*CommerceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _CommerceServer_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _CommerceServer_GetProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/services/commerce/proto/v1/commerce.proto",
}
