// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"context"
)

func NewResolver(
	comment CommentResolver,
	entity EntityResolver,
	query QueryResolver,
) *Resolver {
	return &Resolver{
		commentResolver: &commentResolver{resolver: comment},
		entityResolver:  &entityResolver{resolver: entity},
		queryResolver:   &queryResolver{resolver: query},
	}
}

type Resolver struct {
	commentResolver CommentResolver
	entityResolver  EntityResolver
	queryResolver   QueryResolver
}

func (r *commentResolver) Customer(ctx context.Context, obj *Comment) (*Customer, error) {
	return r.resolver.Customer(ctx, obj)
}

func (r *entityResolver) FindProductByID(ctx context.Context, id string) (*Product, error) {
	return r.resolver.FindProductByID(ctx, id)
}

func (r *queryResolver) Products(ctx context.Context) ([]*Product, error) {
	return r.resolver.Products(ctx)
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return r.commentResolver }

// Entity returns EntityResolver implementation.
func (r *Resolver) Entity() EntityResolver { return r.entityResolver }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return r.queryResolver }

type commentResolver struct{ resolver CommentResolver }
type entityResolver struct{ resolver EntityResolver }
type queryResolver struct{ resolver QueryResolver }
