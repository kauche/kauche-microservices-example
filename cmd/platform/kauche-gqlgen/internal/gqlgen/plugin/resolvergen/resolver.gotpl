{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ .Imports }}

{{ if .HasRoot }}
        func New{{.ResolverType}} (
                {{ range $object := .Objects -}}
                        {{lcFirst $object.Name}} {{ $object.ResolverInterface | ref }},
                {{ end }}) *{{.ResolverType}} {
                return &{{.ResolverType}}{
                        {{ range $object := .Objects -}}
                                {{lcFirst $object.Name}}{{ucFirst $.ResolverType}}: &{{lcFirst $object.Name}}{{ucFirst $.ResolverType}}{resolver: {{lcFirst $object.Name}}},
                        {{ end }}
                }
        }

	type {{.ResolverType}} struct {
                {{ range $object := .Objects -}}
                        {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} {{ $object.ResolverInterface | ref }}
                {{ end }}
        }
{{ end }}

{{ range $resolver := .Resolvers -}}
	func (r *{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}) {{$resolver.Field.GoFieldName}}{{ $resolver.Field.ShortResolverDeclaration }} {
                return r.resolver.{{$resolver.Field.GoFieldName}}(ctx, {{ range $arg := $resolver.Field.Args -}} {{$arg.VarName}} {{ end }})
	}

{{ end }}

{{ range $object := .Objects -}}
	// {{ucFirst $object.Name}} returns {{ $object.ResolverInterface | ref }} implementation.
	func (r *{{$.ResolverType}}) {{ucFirst $object.Name}}() {{ $object.ResolverInterface | ref }} { return r.{{lcFirst $object.Name}}{{ucFirst $.ResolverType}} }
{{ end }}

{{ range $object := .Objects -}}
	type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct { resolver {{ $object.ResolverInterface | ref }} }
{{ end }}
